colnames(log2_a1_nor) = paste(group_list,1:6,sep='')
head(log2_a1_nor)
# 定义nodePar
nodePar <- list(lab.cex = 0.6, pch = c(NA, 19),
cex = 0.7, col = "blue")
# 聚类
hc=hclust(dist(t(log2_a1_nor)))
par(mar=c(5,5,5,10))
# 绘图
plot(as.dendrogram(hc), nodePar = nodePar,  horiz = TRUE)
# 绘图
plot(as.dendrogram(hc), nodePar = nodePar,  horiz = TRUE)
######################################hclust
# 更改表达矩阵列名
head(log2_a1_nor)
colnames(log2_a1_nor) = paste(group_list,1:7,sep='')
head(log2_a1_nor)
# 定义nodePar
nodePar <- list(lab.cex = 0.6, pch = c(NA, 19),
cex = 0.7, col = "blue")
# 聚类
hc=hclust(dist(t(log2_a1_nor)))
par(mar=c(5,5,5,10))
# 绘图
plot(as.dendrogram(hc), nodePar = nodePar,  horiz = TRUE)
log2_a1_nor[1:6,1:6]
log2_a1_nor[1:7,1:7]
df[1:7,1:7]
df$group=group_list
autoplot(prcomp( df[,1:(ncol(df)-1)] ), data=df,colour = 'group')#校正前后结果都不好
##############################################绘制PCA,hclust看样本分组###############################################
pc <- prcomp(t(log2_a1_nor),scale=TRUE)
pcx=data.frame(pc$x)
pcr=cbind(samples=rownames(pcx),grouplist, pcx)
q=ggplot(pcr, aes(PC1, PC2))+geom_point(size=5, aes(color=group_list)) +
geom_text(aes(label=samples),hjust=-0.1, vjust=-0.3)
print(q)
print(p)
# 获得分组信息
library(stringr)
group_list2 = ifelse(str_detect(tmp2$title,"Control")==TRUE,"control","treat")
group_list2
log2_a1_nor_L$group = rep(group_list,each=nrow(log2_a1_nor))
head(log2_a1_nor_L)
# ggplot2画图
library(ggplot2)
p = ggplot(log2_a1_nor_L,
aes(x=sample,y=value,fill=group))+geom_boxplot()
print(p)
print(p)
log2_a1_nor[1:7,1:7]
df[1:7,1:7]
df$group=group_list
autoplot(prcomp( df[,1:(ncol(df)-1)] ), data=df,colour = 'group')#校正前后结果都不好
######################################hclust
# 更改表达矩阵列名
head(log2_a1_nor)
colnames(log2_a1_nor) = paste(group_list,1:7,sep='')
head(log2_a1_nor)
# 定义nodePar
nodePar <- list(lab.cex = 0.6, pch = c(NA, 19),
cex = 0.7, col = "blue")
# 聚类
hc=hclust(dist(t(log2_a1_nor)))
par(mar=c(5,5,5,10))
# 绘图
plot(as.dendrogram(hc), nodePar = nodePar,  horiz = TRUE)
# 绘图
plot(as.dendrogram(hc), nodePar = nodePar,  horiz = TRUE)
# 绘图
plot(as.dendrogram(hc), nodePar = nodePar,  horiz = TRUE) #校正后结果不好
library(limma)
#分组矩阵
design <- model.matrix(~0+factor(group_list))
colnames(design) <- levels(factor(group_list))
rownames(design) <-colnames(new_a1)
design
#比较矩阵
contrast.matrix <-makeContrasts(paste0(unique(group_list),collapse = "-")
,levels = design)
contrast.matrix
#limma分析前对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
log2_a1 <- log2(new_a1)
#step1
fit1 <- lmFit(log2_a1,design)
#step2
fit2 <- contrasts.fit(fit1,contrast.matrix)
fit2 <- eBayes(fit2)
#step3
tempOutput <- topTable(fit2,coef = 1,n = Inf)
nrDEG <- na.omit(tempOutput)
head(nrDEG)
View(nrDEG)
#以2和0.05分别作为logFC和P.value的阈值筛选nrDEG得554个gene
new_nrDEG <- nrDEG[which((nrDEG$logFC>=2|nrDEG$logFC<=-2)&nrDEG$P.Value<=0.05),]
library(pheatmap)
choose_gene=head(rownames(new_nrDEG),30) #取多少基因做差异表达热图？
choose_matrix=new_a1[choose_gene,]
choose_matrix=t(scale(t(choose_matrix)))
pheatmap(choose_matrix,display_numbers = TRUE,number_color = "blue")
View(nrDEG)
choose_gene=head(rownames(new_nrDEG),554) #取多少基因做差异表达热图？
choose_matrix=new_a1[choose_gene,]
choose_matrix=t(scale(t(choose_matrix)))
pheatmap(choose_matrix,display_numbers = TRUE,number_color = "blue")
View(nrDEG)
pheatmap(choose_matrix)
View(choose_matrix)
View(nrDEG)
#limma分析前对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
#log2_a1 <- log2(new_a1)
#step1
fit1_nor <- lmFit(log2_a1_nor,design)
#step2
fit2_nor <- contrasts.fit(fit1,contrast.matrix)
fit2_nor <- eBayes(fit2)
#step3
tempOutput_nor <- topTable(fit2,coef = 1,n = Inf)
nrDEG_nor <- na.omit(tempOutput)
View(nrDEG)
View(nrDEG_nor)
head(nrDEG)
head(nrDEG)
#step2
fit2_nor <- contrasts.fit(fit1_nor,contrast.matrix)
fit2_nor <- eBayes(fit2_nor)
#step3
tempOutput_nor <- topTable(fit2_nor,coef = 1,n = Inf)
nrDEG_nor <- na.omit(tempOutput)
head(nrDEG)
head(nrDEG)
rownames(design) <-colnames(new_a1)
design
#比较矩阵
contrast.matrix <-makeContrasts(paste0(unique(group_list),collapse = "-")
,levels = design)
contrast.matrix
#limma分析前对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
#log2_a1 <- log2(new_a1)
#step1
fit1_nor <- lmFit(log2_a1_nor,design)
#step2
fit2_nor <- contrasts.fit(fit1_nor,contrast.matrix)
fit2_nor <- eBayes(fit2_nor)
#step3
tempOutput_nor <- topTable(fit2_nor,coef = 1,n = Inf)
nrDEG_nor <- na.omit(tempOutput)
head(nrDEG)
head(nrDEG_nor)
View(nrDEG_nor)
View(nrDEG)
View(log2_a1)
View(log2_a1_nor)
#limma分析前对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
#log2_a1 <- log2(new_a1)
#step1
fit1_nor <- lmFit(log2_a1_nor,design)
View(fit1_nor)
#step2
fit2_nor <- contrasts.fit(fit1_nor,contrast.matrix)
fit2_nor <- eBayes(fit2_nor)
#step3
tempOutput_nor <- topTable(fit2_nor,coef = 1,n = Inf)
nrDEG_nor <- na.omit(tempOutput_nor)
head(nrDEG_nor)
head(nrDEG)
#以2和0.05分别作为logFC和P.value的阈值筛选nrDEG得554个gene
new_nrDEG_nor <- nrDEG_nor[which((nrDEG_nor$logFC>=2|nrDEG_nor$logFC<=-2)&nrDEG_nor$P.Value<=0.05),]
View(new_nrDEG_nor)
choose_gene=head(rownames(new_nrDEG_nor),613) #取多少基因做热图？
choose_matrix=new_a1[choose_gene,]
choose_matrix=t(scale(t(choose_matrix)))
pheatmap(choose_matrix)
write.csv(nrDEG_nor,"F:/RstudioWorkspace/sod1 and ALS/result/nrDEG_nor.csv")
print(p)
p = ggplot(log2_a1_L,
aes(x=sample,y=value,fill=group))+geom_boxplot()
print(p)
print(p)#结果130单独分出？
group_list = ifelse(str_detect(tmp2$title,"Control")==TRUE,"control","case")
print(p)
p = ggplot(log2_a1_nor_L,
aes(x=sample,y=value,fill=group))+geom_boxplot()
print(p)
View(log2_a1)
View(nrDEG)
View(choose_matrix)
choose_gene=head(rownames(new_nrDEG),554) #取多少基因做热图？
choose_matrix=new_a1[choose_gene,]
choose_matrix=t(scale(t(choose_matrix)))
View(choose_matrix)
View(new_a1)
View(choose_matrix)
View(new_nrDEG)
View(new_a1)
new_a1[LINC00487,]
new_a1['LINC00487',]
log2_a1['LINC00487',]
log(log2_a1['LINC00487',])
choose_matrix=new_a1[choose_gene,]
View(choose_matrix)
head(scale(choose_matrix))
contrast.matrix
#PCA,没有掌握
pc <- prcomp(t(new_a1),scale=TRUE)
pcx=data.frame(pc$x)
pcr=cbind(samples=rownames(pcx),grouplist, pcx)
p=ggplot(pcr, aes(PC1, PC2))+geom_point(size=5, aes(color=group_list)) +
geom_text(aes(label=samples),hjust=-0.1, vjust=-0.3)
print(p)#结果130单独分出？
design
#分组矩阵
design <- model.matrix(~0+factor(group_list))
colnames(design) <- levels(factor(group_list))
rownames(design) <-colnames(new_a1)
design
design
# ggplot2画图
library(ggplot2)
p = ggplot(log2_a1_L,
aes(x=sample,y=value,fill=group))+geom_boxplot()
print(p)
head(log2_a1_nor)
head(log2_a1)
getwd()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(s_118)
View(s_118)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(s_118)
source('~/.active-rstudio-document', echo=TRUE)
View(s_118_ls)
head(s_118_ls)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(s_299_ls)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
s_115 = read.csv("Mus_OMN and spinalcord/to ENTREZ_118to115.csv")
s_115_ls = s_115[2]
s_299 = read.csv("Mus_OMN and spinalcord/to ENTREZ_304to299.csv")
s_299_ls = s_299[2]
library(VennDiagram)
s_115_list = as.vector(unlist(s_115_ls["X"]))
s_115_list = as.vector(unlist(s_115_ls["t"]))
s_115_list = as.vector(unlist(s_115_ls["to"]))
s_115_list = as.vector(unlist(s_115_ls))
s_299_list = as.vector(unlist(s_299_ls))
venn.diagram(list(spinalcord_118=s_115_list,spinalcord_D126_304=s_299_list),
resolution = 500,imagetype = "tiff",alpha=c(0.5,0.5),
fill=c("yellow","green"),
main="Mus_spinalcord difer tissue DEG",
filename = "VennDiagram_spinal.tif")
load("F:/RstudioWorkspace/sod1-related ALS DEGs/homo/normalize_差异筛选.RData")
head
head(a1)
contrast.matrix
rew_group_list <-c(rep('sod1',3),rep('control',7))
#分组矩阵
pew_design <- model.matrix(~0+factor(group_list))
colnames(pew_design) <- levels(factor(group_list))
rownames(pew_design) <-colnames(new_a1)
pew_design
#比较矩阵
pew_contrast.matrix <-makeContrasts(paste0(unique(group_list),collapse = "-")
,levels = design)
pew_contrast.matrix
#比较矩阵
pew_contrast.matrix <-makeContrasts(paste0(unique(rew_group_list),collapse = "-")
,levels = design)
#比较矩阵
pew_contrast.matrix <-makeContrasts(paste0(unique(rew_group_list),collapse = "-")
,levels = pew_design)
grouplist
group_list
rew_group_list <-c(rep('sod1',3),rep('control',7))
#分组矩阵
pew_design <- model.matrix(~0+factor(pew_group_list))
#分组矩阵
pew_design <- model.matrix(~0+factor(rew_group_list))
colnames(pew_design) <- levels(factor(rew_group_list))
rownames(pew_design) <-colnames(new_a1)
pew_design
#比较矩阵
pew_contrast.matrix <-makeContrasts(paste0(unique(rew_group_list),collapse = "-")
,levels = pew_design)
pew_contrast.matrix
#limma分析前对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
log2_a1 <- log2(new_a1)
#step1
fit1 <- lmFit(log2_a1,design)
#step2
fit2 <- contrasts.fit(fit1,contrast.matrix)
fit2 <- eBayes(fit2)
#step3
tempOutput <- topTable(fit2,coef = 1,n = Inf)
nrDEG <- na.omit(tempOutput)
head(nrDEG)
#group_list <- as.character(tmp[,1])
group_list <-c(rep('SOD1',3),rep('control',7))
#limma分析前对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
log2_a1 <- log2(new_a1)
########################################画图看各个样本的表达量-看表达矩阵的分布图##########################
#使用ggplot2画各个样本表达量的boxplot图
# 准备画图所需数据log2_a1_L
library(reshape2)
head(log2_a1)
log2_a1_L = melt(log2_a1)
head(log2_a1_L)
colnames(log2_a1_L)=c('symbol','sample','value')
head(log2_a1_L)
# 获得分组信息
library(stringr)
group_list = ifelse(str_detect(tmp2$title,"Control")==TRUE,"control","case")
group_list
group_list = ifelse(str_detect(tmp2$title,"Control")==TRUE,"case","control")
group_list
View(tmp2)
group_list = ifelse(str_detect(tmp2$title,"Control")==TRUE,"control","case")
group_list
log2_a1_L$group = rep(group_list,each=nrow(log2_a1))
head(log2_a1_L)
# ggplot2画图
library(ggplot2)
p = ggplot(log2_a1_L,
aes(x=sample,y=value,fill=group))+geom_boxplot()
print(p)
#histogram
p=ggplot(log2_a1_L,aes(value,fill=group))+geom_histogram(bins = 200)+facet_wrap(~sample, nrow = 4)
print(p)
print(p)
#hclust
hc<- hclust(dist(t(log2_a1)))
plot(hc)#结果不好
#PCA,没有掌握
pc <- prcomp(t(new_a1),scale=TRUE)
pcx=data.frame(pc$x)
pcr=cbind(samples=rownames(pcx),grouplist, pcx)
p=ggplot(pcr, aes(PC1, PC2))+geom_point(size=5, aes(color=group_list)) +
geom_text(aes(label=samples),hjust=-0.1, vjust=-0.3)
print(p)#结果130单独分出？
library(limma)
#分组矩阵
design <- model.matrix(~0+factor(group_list))
colnames(design) <- levels(factor(group_list))
rownames(design) <-colnames(new_a1)
design
#PCA,没有掌握
pc <- prcomp(t(new_a1),scale=TRUE)
pcx=data.frame(pc$x)
pcr=cbind(samples=rownames(pcx),grouplist, pcx)
p=ggplot(pcr, aes(PC1, PC2))+geom_point(size=5, aes(color=group_list)) +
geom_text(aes(label=samples),hjust=-0.1, vjust=-0.3)
print(p)#结果130单独分出？
View(a1)
b = gset[[1]]
a1 = exprs(b)   #提取eSet列表里的第一个元素：eSet[[1]]；并使用exprs函数把它转化成矩阵
View(a1)
a1 = a1[,-c(8:10,1:7)]
a1 = a1[,c(8:10,1:7)]
a1 = a1[,c(8:10),c(1:7)]
a1 = a1[,c(8:10,1:7)]
a1 = exprs(b)   #提取eSet列表里的第一个元素：eSet[[1]]；并使用exprs函数把它转化成矩阵
a1 = a1[,c(8:10,1:7)]
View(a1)
a1 = a1[,c(8:10,1:7)]
View(a1)
a1 = exprs(b)   #提取eSet列表里的第一个元素：eSet[[1]]；并使用exprs函数把它转化成矩阵
a1 = a1[,c(8:10,1:7)]
a1 = exprs(b)   #提取eSet列表里的第一个元素：eSet[[1]]；并使用exprs函数把它转化成矩阵
View(a1)
a1 = a1[,c(8:10,1:7)]
a1 = exprs(b)   #提取eSet列表里的第一个元素：eSet[[1]]；并使用exprs函数把它转化成矩阵
a1 = a1[,c(8:10)]
a1 = exprs(b)   #提取eSet列表里的第一个元素：eSet[[1]]；并使用exprs函数把它转化成矩阵
a1 = a1[,c(8:10,1:7)]
View(a1)
load("F:/RstudioWorkspace/sod1-related ALS DEGs/homo/normalize_差异筛选.RData")
View(b)
View(a1)
b = gset[[1]]
a1 = exprs(b)   #提取eSet列表里的第一个元素：eSet[[1]]；并使用exprs函数把它转化成矩阵
a1 = a1[,c(8:10,1:7)]
View(a1)
#####################################过滤探针##########################################
#安装包'org.Hs.eg.db'和'hgu133plus2.db'
library(hgu133plus2.db)
ids <- toTable(hgu133plus2SYMBOL)   #得到probe_id和symbol的对应关系要用hgu133plus2SYMBOL数据集，用toTable提取数据集里面的信息
plot(table(sort(table(ids$symbol))))#查看基因对应probe_id数量
###过滤无对应基因探针
#显示分布
table(rownames(a1)%in% ids$probe_id) #12734个探针不对应基因
table(sort(table(ids$symbol)))
tail(sort(table(ids$symbol)))
#过滤
dim(a1)            #过滤前54675行
a1 = a1[rownames(a1)%in% ids$probe_id,]
dim(a1)            #过滤后41922个探针
#改变探针顺序和表达矩阵a1中探针顺序一致
ids <- ids[match(rownames(a1),ids$probe_id),]
head(ids)
a1[1:5,]
#修改a1，保留对应多个探针的symbol中平均表达最高的探针
tmp <- by(a1,
ids$symbol,
function(x) rownames(x)[which.max(rowMeans(x))]
)
probes<- as.character(tmp)
a1 <- a1[rownames(a1) %in% probes ,]
dim(a1)#20174个探针
########################################转换探针ID后的表达矩阵new_a1##################################################
new_ids <- ids[match(rownames(a1),ids$probe_id),]
new_a1 <- a1[new_ids$probe_id,]           #将a1按照 从ids取出probe_id这一列中的每一行组成一个新的new_a1
rownames(new_a1) <-new_ids$symbol         #把ids的symbol这一列中的每一行给new_a1作为new_a1的行名
dim(new_a1)
########################################从b提取样本分组信息################################################
tmp2 <-pData(b)
grouplist <- tmp2[,1]
group_list
#group_list <- as.character(tmp[,1])
group_list <-c(rep('SOD1',3),rep('control',7))
group_list
#limma分析前对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
log2_a1 <- log2(new_a1)
########################################画图看各个样本的表达量-看表达矩阵的分布图##########################
#使用ggplot2画各个样本表达量的boxplot图
# 准备画图所需数据log2_a1_L
library(reshape2)
head(log2_a1)
log2_a1_L = melt(log2_a1)
head(log2_a1_L)
colnames(log2_a1_L)=c('symbol','sample','value')
head(log2_a1_L)
#group_list = ifelse(str_detect(tmp2$title,"Control")==TRUE,"control","case")
#group_list
log2_a1_L$group = rep(group_list,each=nrow(log2_a1))
head(log2_a1_L)
# ggplot2画图
library(ggplot2)
p = ggplot(log2_a1_L,
aes(x=sample,y=value,fill=group))+geom_boxplot()
print(p)
#histogram
p=ggplot(log2_a1_L,aes(value,fill=group))+geom_histogram(bins = 200)+facet_wrap(~sample, nrow = 4)
print(p)
print(p)
#hclust
hc<- hclust(dist(t(log2_a1)))
plot(hc)#结果不好
library(limma)
#分组矩阵
design <- model.matrix(~0+factor(group_list))
colnames(design) <- levels(factor(group_list))
rownames(design) <-colnames(new_a1)
design
#比较矩阵
contrast.matrix <-makeContrasts(paste0(unique(group_list),collapse = "-")
,levels = design)
contrast.matrix
#limma分析前对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
log2_a1 <- log2(new_a1)
#step1
fit1 <- lmFit(log2_a1,design)
#step2
fit2 <- contrasts.fit(fit1,contrast.matrix)
fit2 <- eBayes(fit2)
#step3
tempOutput <- topTable(fit2,coef = 1,n = Inf)
nrDEG <- na.omit(tempOutput)
head(nrDEG)
#以2和0.05分别作为logFC和P.value的阈值筛选nrDEG得554个gene
new_nrDEG <- nrDEG[which((nrDEG$logFC>=2|nrDEG$logFC<=-2)&nrDEG$P.Value<=0.05),]
dim(new_nrDEG)
View(nrDEG)
write.csv(new_nrDEG,"rew_DEG554.csv")
getwd()
log2_a1_nor = normalizeBetweenArrays(log2_a1)
boxplot(log2_a1_nor)
#分组矩阵
design <- model.matrix(~0+factor(group_list))
colnames(design) <- levels(factor(group_list))
rownames(design) <-colnames(new_a1)
design
#比较矩阵
contrast.matrix <-makeContrasts(paste0(unique(group_list),collapse = "-")
,levels = design)
contrast.matrix
#limma分析前对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
#log2_a1 <- log2(new_a1)
#step1
fit1_nor <- lmFit(log2_a1_nor,design)
#step2
fit2_nor <- contrasts.fit(fit1_nor,contrast.matrix)
fit2_nor <- eBayes(fit2_nor)
#step3
tempOutput_nor <- topTable(fit2_nor,coef = 1,n = Inf)
nrDEG_nor <- na.omit(tempOutput_nor)
head(nrDEG_nor)
#以2和0.05分别作为logFC和P.value的阈值筛选校正过的nrDEG_nor得613个gene
new_nrDEG_nor <- nrDEG_nor[which((nrDEG_nor$logFC>=2|nrDEG_nor$logFC<=-2)&nrDEG_nor$P.Value<=0.05),]
#以2和0.05分别作为logFC和P.value的阈值筛选校正过的nrDEG_nor得613个gene
new_nrDEG_nor <- nrDEG_nor[which((nrDEG_nor$logFC>=2|nrDEG_nor$logFC<=-2)&nrDEG_nor$P.Value<=0.05),]
dim(new_nrDEG_nor)
write.csv(new_nrDEG_nor,"rew_DEG613")
write.csv(new_nrDEG_nor,"rew_DEG613.csv")
View(new_nrDEG_nor)
save.image("F:/RstudioWorkspace/sod1-related ALS DEGs/homo/rew_normalize_差异筛选.RData")
