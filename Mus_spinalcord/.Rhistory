library(pheatmap)
View(new_nrDEG_nor)
write.csv(nrDEG_nor,file = "F:/RstudioWorkspace/sod1 and ALS/Mus_spinalcord/nrDEG_D56_23.csv")
a1 = exprs(b)   #提取eSet列表里的第一个元素：eSet[[1]]；并使用exprs函数把它转化成矩阵
a1 = a1[,c(31:33,10:12)]
head(a1)
ids <- toTable(mouse430a2SYMBOL)   #得到probe_id和symbol的对应关系要用mouse430a2SYMBOL数据集，用toTable提取数据集里面的信息
plot(table(sort(table(ids$symbol))))#查看基因对应probe_id数量
###过滤无对应基因探针
#显示分布
table(rownames(a1)%in% ids$probe_id) #23871个探针不对应基因
table(sort(table(ids$symbol)))
tail(sort(table(ids$symbol)))
#过滤
dim(a1)            #过滤前45101行
a1 = a1[rownames(a1)%in% ids$probe_id,]
dim(a1)            #过滤后21230个探针
#改变探针顺序和表达矩阵a1中探针顺序一致
ids <- ids[match(rownames(a1),ids$probe_id),]
a1[1:5,]
#修改a1，保留对应多个探针的symbol中平均表达最高的探针
tmp <- by(a1,
ids$symbol,
function(x) rownames(x)[which.max(rowMeans(x))]
)
probes<- as.character(tmp)
a1 <- a1[rownames(a1) %in% probes ,]
dim(a1)#12993个探针
########################################转换探针ID后的表达矩阵new_a1##################################################
new_ids <- ids[match(rownames(a1),ids$probe_id),]
new_a1 <- a1[new_ids$probe_id,]           #将a1按照 从ids取出probe_id这一列中的每一行组成一个新的new_a1
rownames(new_a1) <-new_ids$symbol         #把ids的symbol这一列中的每一行给new_a1作为new_a1的行名
dim(new_a1)
########################################从b提取样本分组信息################################################
tmp2 <-pData(b)
grouplist <- tmp2[,1]
#group_list <- as.character(tmp[,1])
group_list <-c(rep('sod1_mutant',3),rep('control',3))
group_list
#limma分析前可能需对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
#（该芯片数据预处理方法为	PLIER algorithm，也未进行log2转换）
new_a1 <- log2(new_a1)
########################################画图看各个样本的表达量-看表达矩阵的分布图##########################
#使用ggplot2画各个样本表达量的boxplot图
# 准备画图所需数据new_a1_L
library(reshape2)
head(new_a1)
new_a1_L = melt(new_a1)
head(new_a1_L)
colnames(new_a1_L)=c('symbol','sample','value')
head(new_a1_L)
# 获得分组信息
#library(stringr)
#group_list = ifelse(str_detect(tmp2$title,"control")==TRUE,"control","sod1_mutant")
#group_list
new_a1_L$group = rep(group_list,each=nrow(new_a1))
head(new_a1_L)
# ggplot2画图
library(ggplot2)
p = ggplot(new_a1_L,
aes(x=sample,y=value,fill=group))+geom_boxplot()
print(p)
#histogram
p=ggplot(new_a1_L,aes(value,fill=group))+geom_histogram(bins = 200)+facet_wrap(~sample, nrow = 4)
print(p)
#hclust
hc<- hclust(dist(t(new_a1)))
plot(hc)#结果不好
#PCA,没有掌握
pc <- prcomp(t(new_a1),scale=TRUE)
pcx=data.frame(pc$x)
pcr=cbind(samples=rownames(pcx),group_list, pcx)
p=ggplot(pcr, aes(PC1, PC2))+geom_point(size=5, aes(color=group_list)) +
geom_text(aes(label=samples),hjust=-0.1, vjust=-0.3)
print(p)
library(limma)
new_a1_nor = normalizeBetweenArrays(new_a1)
#使用ggplot2画各个样本表达量的boxplot图
# 准备画图所需数据new_a1_nor_L
library(reshape2)
head(new_a1_nor)
new_a1_nor_L = melt(new_a1_nor)
head(new_a1_nor_L)
colnames(new_a1_nor_L)=c('symbol','sample','value')
head(new_a1_nor_L)
# 获得分组信息
library(stringr)
#group_list2 = ifelse(str_detect(tmp2$title,"control")==TRUE,"control","treat")
#group_list2
new_a1_nor_L$group = rep(group_list,each=nrow(new_a1_nor))
head(new_a1_nor_L)
##############################################绘制PCA,hclust看样本分组###############################################
pc <- prcomp(t(new_a1_nor),scale=TRUE)
pcx=data.frame(pc$x)
#group_list2 = ifelse(str_detect(tmp2$title,"control")==TRUE,"control","treat")
#group_list2
new_a1_nor_L$group = rep(group_list,each=nrow(new_a1_nor))
head(new_a1_nor_L)
# ggplot2画图
library(ggplot2)
##############################################绘制PCA,hclust看样本分组###############################################
pc <- prcomp(t(new_a1_nor),scale=TRUE)
pcx=data.frame(pc$x)
pcr=cbind(samples=rownames(pcx),group_list, pcx)
q=ggplot(pcr, aes(PC1, PC2))+geom_point(size=5, aes(color=group_list)) +
geom_text(aes(label=samples),hjust=-0.1, vjust=-0.3)
print(q)
#分组矩阵
design <- model.matrix(~0+factor(group_list))
colnames(design) <- levels(factor(group_list))
rownames(design) <-colnames(new_a1)
design
#比较矩阵
contrast.matrix <-makeContrasts(paste0(unique(group_list),collapse = "-")
,levels = design)
contrast.matrix
#limma分析前对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
#new_a1 <- log2(new_a1)
#step1
fit1_nor <- lmFit(new_a1_nor,design)
#step2
fit2_nor <- contrasts.fit(fit1_nor,contrast.matrix)
fit2_nor <- eBayes(fit2_nor)
#step3
tempOutput_nor <- topTable(fit2_nor,coef = 1,n = Inf)
nrDEG_nor <- na.omit(tempOutput_nor)
head(nrDEG_nor)
View(new_nrDEG_nor)
write.csv(nrDEG_nor,"F:/RstudioWorkspace/sod1 and ALS/Mus_spinalcord/nrDEG_D70_23.csv")
#以1.5和0.05分别作为logFC和P.value的阈值筛选校正过的nrDEG_nor得109个gene
new_nrDEG_nor <- nrDEG_nor[which((nrDEG_nor$logFC>=1.5|nrDEG_nor$logFC<=-1.5)&nrDEG_nor$P.Value<=0.05),]
dim(new_nrDEG_nor)
library(pheatmap)
choose_gene=head(rownames(new_nrDEG_nor),17) #取多少基因做热图？
choose_matrix=new_a1[choose_gene,]
choose_matrix=t(scale(t(choose_matrix)))
pheatmap(choose_matrix)
a1 = exprs(b)   #提取eSet列表里的第一个元素：eSet[[1]]；并使用exprs函数把它转化成矩阵
a1 = a1[,c(34:36,13:15)]
head(a1)
#####################################过滤探针##########################################
#安装包'org.Mm.eg.db'和'mouse430a2.db'
library(mouse430a2.db)
ids <- toTable(mouse430a2SYMBOL)   #得到probe_id和symbol的对应关系要用mouse430a2SYMBOL数据集，用toTable提取数据集里面的信息
plot(table(sort(table(ids$symbol))))#查看基因对应probe_id数量
###过滤无对应基因探针
#显示分布
table(rownames(a1)%in% ids$probe_id) #23871个探针不对应基因
table(sort(table(ids$symbol)))
tail(sort(table(ids$symbol)))
#过滤
dim(a1)            #过滤前45101行
a1 = a1[rownames(a1)%in% ids$probe_id,]
dim(a1)            #过滤后21230个探针
#改变探针顺序和表达矩阵a1中探针顺序一致
ids <- ids[match(rownames(a1),ids$probe_id),]
a1[1:5,]
#修改a1，保留对应多个探针的symbol中平均表达最高的探针
tmp <- by(a1,
ids$symbol,
function(x) rownames(x)[which.max(rowMeans(x))]
)
probes<- as.character(tmp)
a1 <- a1[rownames(a1) %in% probes ,]
dim(a1)#12993个探针
########################################转换探针ID后的表达矩阵new_a1##################################################
new_ids <- ids[match(rownames(a1),ids$probe_id),]
new_a1 <- a1[new_ids$probe_id,]           #将a1按照 从ids取出probe_id这一列中的每一行组成一个新的new_a1
rownames(new_a1) <-new_ids$symbol         #把ids的symbol这一列中的每一行给new_a1作为new_a1的行名
dim(new_a1)
########################################从b提取样本分组信息################################################
tmp2 <-pData(b)
grouplist <- tmp2[,1]
#group_list <- as.character(tmp[,1])
group_list <-c(rep('sod1_mutant',3),rep('control',3))
group_list
#limma分析前可能需对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
#（该芯片数据预处理方法为	PLIER algorithm，也未进行log2转换）
new_a1 <- log2(new_a1)
########################################画图看各个样本的表达量-看表达矩阵的分布图##########################
#使用ggplot2画各个样本表达量的boxplot图
# 准备画图所需数据new_a1_L
library(reshape2)
head(new_a1)
new_a1_L = melt(new_a1)
head(new_a1_L)
colnames(new_a1_L)=c('symbol','sample','value')
head(new_a1_L)
# 获得分组信息
#library(stringr)
#group_list = ifelse(str_detect(tmp2$title,"control")==TRUE,"control","sod1_mutant")
#group_list
new_a1_L$group = rep(group_list,each=nrow(new_a1))
head(new_a1_L)
# ggplot2画图
library(ggplot2)
p = ggplot(new_a1_L,
aes(x=sample,y=value,fill=group))+geom_boxplot()
print(p)
#histogram
p=ggplot(new_a1_L,aes(value,fill=group))+geom_histogram(bins = 200)+facet_wrap(~sample, nrow = 4)
print(p)
#hclust
hc<- hclust(dist(t(new_a1)))
plot(hc)#结果不好
#PCA,没有掌握
pc <- prcomp(t(new_a1),scale=TRUE)
pcx=data.frame(pc$x)
pcr=cbind(samples=rownames(pcx),group_list, pcx)
p=ggplot(pcr, aes(PC1, PC2))+geom_point(size=5, aes(color=group_list)) +
geom_text(aes(label=samples),hjust=-0.1, vjust=-0.3)
print(p)
library(limma)
new_a1_nor = normalizeBetweenArrays(new_a1)
boxplot(new_a1_nor)
# 准备画图所需数据类型new_a1_nor_L
library(reshape2)
head(new_a1_nor)
new_a1_nor_L = melt(new_a1_nor)
head(new_a1_nor_L)
colnames(new_a1_nor_L)=c('symbol','sample','value')
head(new_a1_nor_L)
# 获得分组信息
library(stringr)
#group_list2 = ifelse(str_detect(tmp2$title,"control")==TRUE,"control","treat")
#group_list2
new_a1_nor_L$group = rep(group_list,each=nrow(new_a1_nor))
head(new_a1_nor_L)
# ggplot2画图
library(ggplot2)
p = ggplot(new_a1_nor_L,
aes(x=sample,y=value,fill=group))+geom_boxplot()
print(p)
##############################################绘制PCA,hclust看样本分组###############################################
pc <- prcomp(t(new_a1_nor),scale=TRUE)
##############################################绘制PCA,hclust看样本分组###############################################
pc <- prcomp(t(new_a1_nor),scale=TRUE)
#分组矩阵
design <- model.matrix(~0+factor(group_list))
colnames(design) <- levels(factor(group_list))
rownames(design) <-colnames(new_a1)
design
#比较矩阵
contrast.matrix <-makeContrasts(paste0(unique(group_list),collapse = "-")
,levels = design)
contrast.matrix
#limma分析前对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
#new_a1 <- log2(new_a1)
#step1
fit1_nor <- lmFit(new_a1_nor,design)
#step2
fit2_nor <- contrasts.fit(fit1_nor,contrast.matrix)
fit2_nor <- eBayes(fit2_nor)
#step3
tempOutput_nor <- topTable(fit2_nor,coef = 1,n = Inf)
nrDEG_nor <- na.omit(tempOutput_nor)
head(nrDEG_nor)
#以1.5和0.05分别作为logFC和P.value的阈值筛选校正过的nrDEG_nor得109个gene
new_nrDEG_nor <- nrDEG_nor[which((nrDEG_nor$logFC>=1.5|nrDEG_nor$logFC<=-1.5)&nrDEG_nor$P.Value<=0.05),]
dim(new_nrDEG_nor)
write.csv(nrDEG_nor,"F:/RstudioWorkspace/sod1 and ALS/Mus_spinalcord/nrDEG_D98_39.csv")
library(pheatmap)
choose_gene=head(rownames(new_nrDEG_nor),17) #取多少基因做热图？
choose_matrix=new_a1[choose_gene,]
choose_matrix=t(scale(t(choose_matrix)))
pheatmap(choose_matrix)
a1 = exprs(b)   #提取eSet列表里的第一个元素：eSet[[1]]；并使用exprs函数把它转化成矩阵
a1 = a1[,c(37:39,16:18)]
head(a1)
#####################################过滤探针##########################################
#安装包'org.Mm.eg.db'和'mouse430a2.db'
library(mouse430a2.db)
ids <- toTable(mouse430a2SYMBOL)   #得到probe_id和symbol的对应关系要用mouse430a2SYMBOL数据集，用toTable提取数据集里面的信息
plot(table(sort(table(ids$symbol))))#查看基因对应probe_id数量
###过滤无对应基因探针
#显示分布
table(rownames(a1)%in% ids$probe_id) #23871个探针不对应基因
table(sort(table(ids$symbol)))
tail(sort(table(ids$symbol)))
#过滤
dim(a1)            #过滤前45101行
a1 = a1[rownames(a1)%in% ids$probe_id,]
dim(a1)            #过滤后21230个探针
#改变探针顺序和表达矩阵a1中探针顺序一致
ids <- ids[match(rownames(a1),ids$probe_id),]
a1[1:5,]
#修改a1，保留对应多个探针的symbol中平均表达最高的探针
tmp <- by(a1,
ids$symbol,
function(x) rownames(x)[which.max(rowMeans(x))]
)
probes<- as.character(tmp)
a1 <- a1[rownames(a1) %in% probes ,]
dim(a1)#12993个探针
########################################转换探针ID后的表达矩阵new_a1##################################################
new_ids <- ids[match(rownames(a1),ids$probe_id),]
new_a1 <- a1[new_ids$probe_id,]           #将a1按照 从ids取出probe_id这一列中的每一行组成一个新的new_a1
rownames(new_a1) <-new_ids$symbol         #把ids的symbol这一列中的每一行给new_a1作为new_a1的行名
dim(new_a1)
########################################从b提取样本分组信息################################################
tmp2 <-pData(b)
grouplist <- tmp2[,1]
#group_list <- as.character(tmp[,1])
group_list <-c(rep('sod1_mutant',3),rep('control',3))
group_list
#limma分析前可能需对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
#（该芯片数据预处理方法为	PLIER algorithm，也未进行log2转换）
new_a1 <- log2(new_a1)
########################################画图看各个样本的表达量-看表达矩阵的分布图##########################
#使用ggplot2画各个样本表达量的boxplot图
# 准备画图所需数据new_a1_L
library(reshape2)
head(new_a1)
new_a1_L = melt(new_a1)
head(new_a1_L)
colnames(new_a1_L)=c('symbol','sample','value')
head(new_a1_L)
# 获得分组信息
#library(stringr)
#group_list = ifelse(str_detect(tmp2$title,"control")==TRUE,"control","sod1_mutant")
#group_list
new_a1_L$group = rep(group_list,each=nrow(new_a1))
head(new_a1_L)
library(limma)
new_a1_nor = normalizeBetweenArrays(new_a1)
boxplot(new_a1_nor)
# 准备画图所需数据类型new_a1_nor_L
library(reshape2)
head(new_a1_nor)
new_a1_nor_L = melt(new_a1_nor)
head(new_a1_nor_L)
colnames(new_a1_nor_L)=c('symbol','sample','value')
head(new_a1_nor_L)
# 获得分组信息
library(stringr)
#group_list2 = ifelse(str_detect(tmp2$title,"control")==TRUE,"control","treat")
#group_list2
new_a1_nor_L$group = rep(group_list,each=nrow(new_a1_nor))
head(new_a1_nor_L)
# ggplot2画图
library(ggplot2)
p = ggplot(new_a1_nor_L,
aes(x=sample,y=value,fill=group))+geom_boxplot()
print(p)
##############################################绘制PCA,hclust看样本分组###############################################
pc <- prcomp(t(new_a1_nor),scale=TRUE)
#PCA,没有掌握
pc <- prcomp(t(new_a1),scale=TRUE)
pcx=data.frame(pc$x)
pcr=cbind(samples=rownames(pcx),group_list, pcx)
p=ggplot(pcr, aes(PC1, PC2))+geom_point(size=5, aes(color=group_list)) +
geom_text(aes(label=samples),hjust=-0.1, vjust=-0.3)
print(p)
#hclust
hc<- hclust(dist(t(new_a1)))
plot(hc)#结果不好
####################################################校正批次效应后差异基因筛选#################################################
library(limma)
#分组矩阵
design <- model.matrix(~0+factor(group_list))
colnames(design) <- levels(factor(group_list))
rownames(design) <-colnames(new_a1)
design
#比较矩阵
contrast.matrix <-makeContrasts(paste0(unique(group_list),collapse = "-")
,levels = design)
contrast.matrix
#limma分析前对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
#new_a1 <- log2(new_a1)
#step1
fit1_nor <- lmFit(new_a1_nor,design)
#step2
fit2_nor <- contrasts.fit(fit1_nor,contrast.matrix)
fit2_nor <- eBayes(fit2_nor)
#step3
tempOutput_nor <- topTable(fit2_nor,coef = 1,n = Inf)
nrDEG_nor <- na.omit(tempOutput_nor)
head(nrDEG_nor)
#以1.5和0.05分别作为logFC和P.value的阈值筛选校正过的nrDEG_nor得109个gene
new_nrDEG_nor <- nrDEG_nor[which((nrDEG_nor$logFC>=1.5|nrDEG_nor$logFC<=-1.5)&nrDEG_nor$P.Value<=0.05),]
dim(new_nrDEG_nor)
write.csv(nrDEG_nor,"F:/RstudioWorkspace/sod1 and ALS/Mus_spinalcord/nrDEG_D112_171.csv")
library(pheatmap)
choose_gene=head(rownames(new_nrDEG_nor),17) #取多少基因做热图？
choose_matrix=new_a1[choose_gene,]
choose_matrix=t(scale(t(choose_matrix)))
pheatmap(choose_matrix)
# ggplot2画图
library(ggplot2)
p = ggplot(new_a1_nor_L,
aes(x=sample,y=value,fill=group))+geom_boxplot()
print(p)
# ggplot2画图
library(ggplot2)
p = ggplot(new_a1_L,
aes(x=sample,y=value,fill=group))+geom_boxplot()
print(p)
a1 = exprs(b)   #提取eSet列表里的第一个元素：eSet[[1]]；并使用exprs函数把它转化成矩阵
a1 = a1[,c(40:42,19:21)]
head(a1)
#####################################过滤探针##########################################
#安装包'org.Mm.eg.db'和'mouse430a2.db'
library(mouse430a2.db)
ids <- toTable(mouse430a2SYMBOL)   #得到probe_id和symbol的对应关系要用mouse430a2SYMBOL数据集，用toTable提取数据集里面的信息
plot(table(sort(table(ids$symbol))))#查看基因对应probe_id数量
###过滤无对应基因探针
#显示分布
table(rownames(a1)%in% ids$probe_id) #23871个探针不对应基因
table(sort(table(ids$symbol)))
tail(sort(table(ids$symbol)))
#过滤
dim(a1)            #过滤前45101行
a1 = a1[rownames(a1)%in% ids$probe_id,]
dim(a1)            #过滤后21230个探针
#改变探针顺序和表达矩阵a1中探针顺序一致
ids <- ids[match(rownames(a1),ids$probe_id),]
a1[1:5,]
#修改a1，保留对应多个探针的symbol中平均表达最高的探针
tmp <- by(a1,
ids$symbol,
function(x) rownames(x)[which.max(rowMeans(x))]
)
probes<- as.character(tmp)
a1 <- a1[rownames(a1) %in% probes ,]
dim(a1)#12993个探针
########################################转换探针ID后的表达矩阵new_a1##################################################
new_ids <- ids[match(rownames(a1),ids$probe_id),]
new_a1 <- a1[new_ids$probe_id,]           #将a1按照 从ids取出probe_id这一列中的每一行组成一个新的new_a1
rownames(new_a1) <-new_ids$symbol         #把ids的symbol这一列中的每一行给new_a1作为new_a1的行名
dim(new_a1)
########################################从b提取样本分组信息################################################
tmp2 <-pData(b)
grouplist <- tmp2[,1]
#group_list <- as.character(tmp[,1])
group_list <-c(rep('sod1_mutant',3),rep('control',3))
group_list
#limma分析前可能需对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
#（该芯片数据预处理方法为	PLIER algorithm，也未进行log2转换）
new_a1 <- log2(new_a1)
########################################画图看各个样本的表达量-看表达矩阵的分布图##########################
#使用ggplot2画各个样本表达量的boxplot图
# 准备画图所需数据new_a1_L
library(reshape2)
head(new_a1)
new_a1_L = melt(new_a1)
head(new_a1_L)
colnames(new_a1_L)=c('symbol','sample','value')
head(new_a1_L)
# 获得分组信息
#library(stringr)
#group_list = ifelse(str_detect(tmp2$title,"control")==TRUE,"control","sod1_mutant")
#group_list
new_a1_L$group = rep(group_list,each=nrow(new_a1))
head(new_a1_L)
# ggplot2画图
library(ggplot2)
p = ggplot(new_a1_L,
aes(x=sample,y=value,fill=group))+geom_boxplot()
print(p)
#histogram
p=ggplot(new_a1_L,aes(value,fill=group))+geom_histogram(bins = 200)+facet_wrap(~sample, nrow = 4)
print(p)
#hclust
hc<- hclust(dist(t(new_a1)))
plot(hc)#结果不好
#PCA,没有掌握
pc <- prcomp(t(new_a1),scale=TRUE)
pcx=data.frame(pc$x)
pcr=cbind(samples=rownames(pcx),group_list, pcx)
p=ggplot(pcr, aes(PC1, PC2))+geom_point(size=5, aes(color=group_list)) +
geom_text(aes(label=samples),hjust=-0.1, vjust=-0.3)
print(p)
library(limma)
new_a1_nor = normalizeBetweenArrays(new_a1)
####################################################校正批次效应后差异基因筛选#################################################
library(limma)
#分组矩阵
design <- model.matrix(~0+factor(group_list))
colnames(design) <- levels(factor(group_list))
rownames(design) <-colnames(new_a1)
design
#比较矩阵
contrast.matrix <-makeContrasts(paste0(unique(group_list),collapse = "-")
,levels = design)
contrast.matrix
#limma分析前对数据log2处理(下载矩阵的标准化处理方法MAS5返回值未经过log2转换)
#new_a1 <- log2(new_a1)
#step1
fit1_nor <- lmFit(new_a1_nor,design)
#step2
fit2_nor <- contrasts.fit(fit1_nor,contrast.matrix)
fit2_nor <- eBayes(fit2_nor)
#step3
tempOutput_nor <- topTable(fit2_nor,coef = 1,n = Inf)
nrDEG_nor <- na.omit(tempOutput_nor)
head(nrDEG_nor)
#以1.5和0.05分别作为logFC和P.value的阈值筛选校正过的nrDEG_nor得109个gene
new_nrDEG_nor <- nrDEG_nor[which((nrDEG_nor$logFC>=1.5|nrDEG_nor$logFC<=-1.5)&nrDEG_nor$P.Value<=0.05),]
dim(new_nrDEG_nor)
library(pheatmap)
choose_gene=head(rownames(new_nrDEG_nor),17) #取多少基因做热图？
choose_matrix=new_a1[choose_gene,]
choose_matrix=t(scale(t(choose_matrix)))
pheatmap(choose_matrix)
pheatmap(choose_matrix)
choose_gene=head(rownames(new_nrDEG_nor),304) #取多少基因做热图？
choose_matrix=new_a1[choose_gene,]
choose_matrix=t(scale(t(choose_matrix)))
pheatmap(choose_matrix)
write.csv(nrDEG_nor,"F:/RstudioWorkspace/sod1 and ALS/Mus_spinalcord/nrDEG_D126_304.csv")
View(nrDEG_nor)
getwd()
